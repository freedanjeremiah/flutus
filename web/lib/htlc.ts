import { Data } from "@meshsdk/core";

export const htlcAddress =
  "addr_test1wr34m428dvfy74a3y8wa9al6pq9t3l0ck90yl7yla4j8pfgwg6qzs";

export const htlcScript = {
  type: "PlutusScriptV3",
  description: "Generated by Aiken",
  cborHex:
    "59032659032301010029800aba2aba1aab9faab9eaab9dab9a48888896600264653001300700198039804000cdc3a400530070024888966002600460106ea800e26466453001159800980098059baa002899191919194c004c0500066eb4c04c0066eb8c04c0166eb8c04c0126eb8c04c00d22222598009807980a9baa301830190058cc004c9660026020602c6ea8006266e24dd6980c8031bad30193017375400314a080a8c060c058dd5180c180b1baa301830193019301930193019301930193016375401d3015375402323019301a301a301a301a301a301a301a301a001911919800800801912cc00400629422b30013371e6eb8c07000400e2946266004004603a00280c101b24444b3001300f0038acc004cdc79bc7375c603860346ea80540162b3001330013758600460346ea804801e33001004a50a51406114a080c229410184566002602600713233225980099b8f378e004011159800998021bac3005301d375402a015159800cc00401e94294501b4528c52820368a50406d14a080d8dd7180e8009bae301d301e001301a375402b15980099b874801000e2b3001330013758600460346ea804801e200914a080c22b30013370e9003001c4c966002b30013371e6f1c00401a2946266e3cde38009bae301d00c406519800802d28528a0328a5040646eb8c070c068dd500ac56600266e1d2008003880245282030406080c101820304590140c04c004c048004c044004c040004c030dd5180718061baa0028b201498059baa0079807001a444b30013004002899192cc004c05000a00b1640486eb8c048004c03cdd50054566002601000513232332259800980b001c01e2c80a0dd718098009bae30130023013001300f375401515980099b874801000a2b3001300f37540150038b20208acc004cdc3a400c0051323259800980a00140162c8090dd7180900098079baa00a8acc004cdc3a401000515980098079baa00a801c59010456600266e1d200a0028acc004c03cdd5005400e2c80822b30013370e90060014566002601e6ea802a007164041164034806900d201a4034806900d0c030c034004dc3a400060126ea800e2c8038600e00260066ea801e29344d95900101",
};

// src/offchain/createRevealRedeemer.ts

/**
 * Converts a primitive value to Mesh-compatible `Data` type:
 * - string (hex with 0x prefix or utf8)
 * - number/bigint -> Plutus Int
 * - boolean -> Plutus Bool (constructor 1 or 0)
 */
export function toData(value: string | number | bigint | boolean): Data {
  if (typeof value === "string") {
    const hex = value.startsWith("0x")
      ? value.slice(2)
      : Buffer.from(value, "utf8").toString("hex");
    return { alternative: 0, fields: [hex] };
  }

  if (typeof value === "number" || typeof value === "bigint") {
    return { alternative: 0, fields: [BigInt(value).toString()] };
  }

  if (typeof value === "boolean") {
    return { alternative: value ? 1 : 0, fields: [] };
  }

  throw new Error("Unsupported type toData()");
}

/**
 * Helper to construct the Mesh redeemer object for the Aiken HTLC contract.
 * Matches `pub type Redeemer { WithdrawAction { secret: ByteArray } â€¦ }`.
 *
 * @param secret     The reveal secret preimage string
 * @param usePublic  If true, uses `PublicWithdrawAction` variant
 * @param budget     Memory & CPU budget (optional override)
 *
 * @returns Mesh redeemer object with required cost budget
 */
export function createRevealRedeemer(
  secret: string,
  usePublic = false,
  budget?: { mem?: number; steps?: number }
): { data: Data; budget: { mem: number; steps: number } } {
  // Variant index: 0 = WithdrawAction, 3 = PublicWithdrawAction
  const alternative = usePublic ? 3 : 0;
  const data: Data = {
    alternative,
    fields: [toData(secret)],
  };

  return {
    data,
    budget: {
      mem: budget?.mem ?? 5_000_000,
      steps: budget?.steps ?? 5_000_000,
    },
  };
}
